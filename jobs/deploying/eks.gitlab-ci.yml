---

include:
  - local: /jobs/utils/aws/aws-assume-role.gitlab-ci.yml

# Use this job template deploy to EKS
#
# env
# This job requires the user to include this job template
# This job requires the user to define the deploy stage in his pipeline
# eg:
# include:
#   - project: automation/cicd/templates
#     ref: ${latest project version}
#     file: jobs/deploying/deploy-eks.gitlab-ci.yml
# stages:
#   - deploy

.deploy-eks:
  image: registry.dev.yelo.inet.telenet.be/enttribe/ansible-aws-cli:1.4.0-ansible9.6.0
  stage: deploy
  extends:
    - .aws_assume_role
  variables:
    AWS_ENV: ""
    AWS_SPOKE_ENV: ""
    INFRASTRUCTURE_PATH: ""
    INFRASTRUCTURE_BRANCH: ""
    ARS_AWS_PROFILE: "$AWS_ACCOUNT_NAME"
    ARS_AWS_ROLE_TO_ASSUME: "arn:aws:iam::$AWS_ACCOUNT:role/$AWS_ASSUME_ROLE_FOR_DEPLOY"
  before_script:
    - !reference [.aws_assume_role, before_script]
    - echo $ANSIBLE_VAULT_PASSWORD > ~/.ansible_vault
    - git clone --branch ${INFRASTRUCTURE_BRANCH} "http://gitlab-access-token:${INFRASTRUCTURE_ACCESS_TOKEN}@${CI_SERVER_HOST}/${INFRASTRUCTURE_PATH}" --single-branch
    - cd infrastructure
  script:
    - ./scripts/galaxy_collections.sh
    - aws eks update-kubeconfig --name $AWS_EKS_CLUSTER_NAME --region $AWS_REGION
    - ansible-playbook site.yml -t aws-applications -D --vault-password-file=~/.ansible_vault -e aws_env=$AWS_ENV -e aws_spoke_env=$AWS_SPOKE_ENV -e aws_region=$AWS_REGION -e aws_application=$CI_PROJECT_NAME -e application_helm_targetRevision=$HELM_REVISION -e application_tag=$CI_COMMIT_SHORT_SHA

...
