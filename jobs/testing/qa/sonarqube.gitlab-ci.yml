---

# This job requires the user to include this job template
# This job requires the user to define the test stage in his pipeline
# (or override the stage of this job)
#
# Provided variables for user behavior
#   - name: SONAR_PROJECT_TAGS
#     default value: ''
#     description: It is recommended at least to put in a team id
#                  eg 'CoreBE'
#                  it can contain many more tags, provide this variable
#                  with comma separated list of tags (pre-url escaped for other characters!)
#   - name: SONAR_USE_TEST_ENVIRONMENT
#     default_value: "false"
#     description: when set to "true" (as string!) it will select our test sonarqube instance
#                  to do the scanning against.
#   - name: SONAR_SCANNER_ADDITIONAL_OPTS
#     default_value: ''
#     description: Can contain extra -Dsonar.xxx variables to pass to sonar-canner cli.
#   - name: SONAR_PROJECT_KEY
#     default_value: 'project-$CI_PROJECT_ID'
#     description: The unique id in sonarqube for your project
#                  If you have an active project in sonarqube you can manually migrate the id
#                  in sonarqube web ui via your Project > Project Settings > Update Key
#   - name: SONAR_PROJECT_NAME
#     default_value: 'CI_PROJECT_PATH'
#     description: The name of your project, displayed in sonarqube ui
#
#
# NOTES:
#   - commonly you might want to assign 'needs' (previous jobs) to sonarqube job (pass coverage analysis eg)
#   - no rules are defined, to allow this job to run on any branch/MR/tag pipeline.
#     it is up to the developer using this pipeline which workflow he wishes to get sonar reports of.
#   - allow_failure has been set default to false (aka fail job on sonarqube qa failure response)
#     it is up to the integration to choose when this job should fail or not
#     (eg not fail on branch pipelines, but fail on MR/default branch pipeline)
#
# eg:
# include:
#   - project: automation/cicd/templates
#     ref: ${latest project version}
#     file: jobs/testing/qa/sonarqube.gitlab-ci.yml
#
# stages:
#   - test
#
# sonarqube:
#   variables:
#     SONAR_PROJECT_TAGS: "<team>"

sonarqube:
  stage: test
  variables:
    SONAR_HOST_URL: "${SONARQUBE_PROD_URL}"
    SONAR_TOKEN: "${SONARQUBE_PROD_TOKEN}"
    SONAR_TOKEN_PROV: "${SONARQUBE_PROD_PROVISION_TOKEN}"
    SONAR_USE_TEST_ENVIRONMENT: "false"
    SONAR_PROJECT_KEY: "project-$CI_PROJECT_ID"
    SONAR_PROJECT_NAME: "$CI_PROJECT_PATH"
    SONAR_PROJECT_TAGS: ""
    SONAR_PROJECT_MONOREPO: "false"
  image:
    name: sonarsource/sonar-scanner-cli:4
    entrypoint: [""]
  allow_failure: false
  script:
    - |-
      if [ "$SONAR_USE_TEST_ENVIRONMENT" == "true" ]
      then
        SONAR_HOST_URL=${SONARQUBE_TEST_URL}
        SONAR_TOKEN=${SONARQUBE_TEST_TOKEN}
        SONAR_TOKEN_PROV=${SONARQUBE_TEST_PROVISION_TOKEN}
      fi
      SONAR_PROJECT_KEY=${SONAR_PROJECT_KEY/[^a-zA-Z0-9-_\.]/.}
      git fetch --unshallow
    - >
      sonar-scanner
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.projectName=$SONAR_PROJECT_NAME
      -Dsonar.qualitygate.wait=true
      -X
      ${SONAR_SCANNER_ADDITIONAL_OPTS}
    - |-
      if [ "$SONAR_PROJECT_TAGS" != "" ]
      then
        curl -w '%{http_code}' -o /dev/null -sS -u "${SONAR_TOKEN_PROV}:" -X POST "${SONAR_HOST_URL}api/project_tags/set?project=${SONAR_PROJECT_KEY}&tags=${SONAR_PROJECT_TAGS}" 
      fi
      curl -w '%{http_code}' -o /dev/null -sS -u "${SONAR_TOKEN_PROV}:" -X POST "${SONAR_HOST_URL}api/alm_settings/set_gitlab_binding?almSetting=${CI_SERVER_HOST}&project=${SONAR_PROJECT_KEY}&repository=${CI_PROJECT_ID}&monorepo=${SONAR_PROJECT_MONOREPO}"

...
