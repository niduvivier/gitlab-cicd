---

include: 
  - local: /jobs/utils/gitlab-http-access.gitlab-ci.yml
  - local: /services/docker-dind.gitlab-ci.yml

# This job requires the user to include this job template
# This job requires the user to define the integration stage in his pipeline
# eg:
# include:
#   - project: automation/cicd/templates
#     ref: ${latest project version}
#     file: ansible-molecule.gitlab-ci.yml
# stages:
#   - integration

molecule:
  extends:
    - .gitlab_http_access
    - .docker-dind
  rules:
    # Do not run on tags
    - if: $CI_COMMIT_TAG
      when: never
    # Run on MR's
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Run on default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # Run on any other branch when triggered
    - if: '$CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "web"'
    # do not run otherwise
    - when: never
  variables:
    ANSIBLE_FORCE_COLOR: 'true'
    ANSIBLE_DIFF_ALWAYS: 'true'
    MOLECULE_CMD_OPTS: ''
    MOLECULE_TEST_CMD_OPTS: ''
  parallel: 4
  stage: integration
  tags:
    - molecule
  image: $REGISTRY/automation/containers/ansible-molecule:production
  script:
    - |-
      set -x
      molecule list -f yaml 2>/dev/null | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | grep -v '> list' | grep -vE '^section_' > scenario_list.yml
      scenarios=$(yq -rc --argjson ntot ${CI_NODE_TOTAL} --argjson nidx $((${CI_NODE_INDEX}-1)) '[.[]|.["Scenario Name"]]|unique|[_nwise($ntot)]|transpose|map(map(values))[$nidx][]?' scenario_list.yml)
      for scenario in $scenarios
      do
        echo " ------- Running scenario ${scenario} ------- "
        molecule reset --scenario-name "${scenario}"
        molecule ${MOLECULE_CMD_OPTS} test --scenario-name "${scenario}" ${MOLECULE_TEST_CMD_OPTS}
        echo " ------- END: Running scenario ${scenario} ------- "
      done

...
