---

# This job requires the user to include this job template
# This job requires the user to define the test stage in his pipeline
# eg:
# include:
#   - project: automation/cicd/templates
#     ref: ${latest project version}
#     file: jobs/testing/ansible/ansible-testing.gitlab-ci.yml
# stages:
#   - test

variables:
  COLLECTION_PATH: '$${COLLECTION_PATH}'

.ansible-test-env:
  before_script:
    - |-
      #!/bin/bash
      set -xv

      NS_N=local/fake
      PREFIX=/opt/ansible_collections

      if [[ -f "galaxy.yml" ]]
      then
        NS_N=$(yq -r '"\(.namespace)/\(.name)"' galaxy.yml)
      fi

      COLLECTION_PATH=$PREFIX/$NS_N
      eval export COLLECTION_PATH=$COLLECTION_PATH

.ansible-test-prereq:
  stage: test
  rules:
    # Do not run on tags
    - if: $CI_COMMIT_TAG
      when: never
    # Run on MR's
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Run on default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    # Run on any other branch
    - if: $CI_COMMIT_BRANCH
    # do not run otherwise
    - when: never
  image: $REGISTRY/automation/containers/ansible-molecule:production
  before_script:
    - !reference [.ansible-test-env, before_script]
    - pip install -r tests/**/requirements.txt || true
    - |-
      #!/bin/bash
      set -xv

      mkdir -p $COLLECTION_PATH

      if [[ -f "galaxy.yml" ]]
      then
        cp -R . $COLLECTION_PATH
        rm -rf $COLLECTION_PATH/.venv

      else
        # tests
        [[ -d "tests" ]] && mkdir -p $COLLECTION_PATH/tests && cp -R tests/* $COLLECTION_PATH/tests/

        # plugins
        [[ -d "library" ]] && mkdir -p $COLLECTION_PATH/plugins/modules && cp -R library/* $COLLECTION_PATH/plugins/modules/
        [[ -d "module_utils" ]] && mkdir -p $COLLECTION_PATH/plugins/module_utils && cp -R module_utiles/ $COLLECTION_PATH/plugins/module_utils/
        [[ -d "action_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/action && cp -R action_plugins/* $COLLECTION_PATH/plugins/action/
        [[ -d "cache_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/cache && cp -R cache_plugins/* $COLLECTION_PATH/plugins/cache/
        [[ -d "connection_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/connection && cp -R connection_plugins/* $COLLECTION_PATH/plugins/connection/
        [[ -d "filter_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/filter && cp -R filter_plugins/* $COLLECTION_PATH/plugins/filter/
        [[ -d "inventory_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/inventory && cp -R inventory_plugins/* $COLLECTION_PATH/plugins/inventory/
        [[ -d "lookup_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/lookup && cp -R lookup_plugins/* $COLLECTION_PATH/plugins/lookup/
        [[ -d "test_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/test && cp -R test_plugins/* $COLLECTION_PATH/plugins/test/
        [[ -d "vars_plugins" ]] && mkdir -p $COLLECTION_PATH/plugins/vars && cp -R vars_plugins/* $COLLECTION_PATH/plugins/vars/

        # role content
        mkdir -p $COLLECTION_PATH/roles/fake
        [[ -d "defaults" ]] && cp -R ./defaults $COLLECTION_PATH/roles/fake/
        [[ -d "files" ]] && cp -R ./files $COLLECTION_PATH/fake/
        [[ -d "handlers" ]] && cp -R ./handlers $COLLECTION_PATH/roles/fake/
        [[ -d "meta" ]] && cp -R ./meta $COLLECTION_PATH/roles/fake/
        [[ -d "tasks" ]] && cp -R ./tasks $COLLECTION_PATH/roles/fake/
        [[ -d "templates" ]] && cp -R ./templates $COLLECTION_PATH/roles/fake/
        [[ -d "vars" ]] && cp -R ./vars $COLLECTION_PATH/roles/fake/

        echo "---
      version: 0.0.1
      ..." > "${COLLECTION_PATH}/galaxy.yml"

      fi
    - cd $COLLECTION_PATH
  after_script:
    - !reference [.ansible-test-env, before_script]
    - |-
      #!/bin/bash
      set -xv
      if [[ -d "${COLLECTION_PATH}/tests/output" ]];
      then
        cp -R "${COLLECTION_PATH}/tests/output" "${CI_PROJECT_DIR}/tests/"

        if [[ -f "${CI_PROJECT_DIR}/tests/output/reports/coverage.xml" ]]
        then
          sed -i "s#<source>${COLLECTION_PATH}</source>#<source>.</source>#g" ${CI_PROJECT_DIR}/tests/output/reports/coverage.xml
          if [[ ! -e "galaxy.yml" ]]
          then
            sed -i 's#filename="plugins/modules#filename="library#g' ${CI_PROJECT_DIR}/tests/output/reports/coverage.xml
          fi
        fi
        if [[ -f "${CI_PROJECT_DIR}/tests/output/junit/python3.9-units.xml" ]]
        then
          sed -i "s#file=\".*?${COLLECTION_PATH}/#file=\"#g" ${CI_PROJECT_DIR}/tests/output/junit/python3.9-units.xml
        fi
      fi
  artifacts:
    paths:
      - tests/output/

ansible-sanity:
  extends:
    - .ansible-test-prereq
  allow_failure: true
  script:
    - mkdir -p /root/.ansible/test/cache
    - curl -sSL "https://ci-files.testing.ansible.com/ansible-test/get-pip-21.3.1.py" -o /root/.ansible/test/cache/get_pip_21_3_1.py
    - echo -e "[global]\nproxy = ${http_proxy}" > /etc/pip.conf
    - ansible-galaxy collection install -r tests/requirements.yml -p /opt
    - ansible-test sanity --coverage --local

ansible-units:
  extends:
    - .ansible-test-prereq
  rules:
    # Do not run on tags
    - if: $CI_COMMIT_TAG
      when: never
    # Run on MR's
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      exists: &ansible_python_files
        - '*_plugins/*.py'
        - '*_plugins/**/*.py'
        - library/*.py
        - library/**/*.py
        - module_utils/*.py
        - module_utils/**/*.py
        - plugins/**/*.py
        - tests/unit/*.py
        - tests/unit/**/*.py
    # Run on default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      exists: *ansible_python_files
    # Run on any other branch
    - if: $CI_COMMIT_BRANCH
      exists: *ansible_python_files
    # do not run otherwise
    - when: never
  script:
    - ansible-test units --local --coverage --python 3.9
  artifacts:
    reports:
      junit: tests/output/junit/python3.9-units.xml

ansible-coverage:
  extends:
    - .ansible-test-prereq
  needs:
    - job: ansible-sanity
      artifacts: true
      optional: true
    - job: ansible-units
      artifacts: true
      optional: true
  script:
    - |-
      if [[ -d "tests/output/coverage" ]]
      then
        ansible-test coverage xml
      fi
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: tests/output/reports/coverage.xml

...
